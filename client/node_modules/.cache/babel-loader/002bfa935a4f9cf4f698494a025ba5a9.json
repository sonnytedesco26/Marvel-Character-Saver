{"ast":null,"code":"import { __extends } from 'tslib';\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n    setPrototypeOf = _a === void 0 ? function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n} : _a;\n\nvar InvariantError =\n/** @class */\nfunction (_super) {\n  __extends(InvariantError, _super);\n\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n\n  return InvariantError;\n}(Error);\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nvar verbosityLevels = [\"log\", \"warn\", \"error\", \"silent\"];\nvar verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod(method) {\n  return function () {\n    if (verbosityLevels.indexOf(method) >= verbosityLevel) {\n      return console[method].apply(console, arguments);\n    }\n  };\n}\n\n(function (invariant) {\n  invariant.log = wrapConsoleMethod(\"log\");\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {}));\n\nfunction setVerbosity(level) {\n  var old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n} // Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also export processStub, so you can import { invariant, processStub } from\n// \"ts-invariant\" and assign processStub to a local variable named process.\n\n\nvar processStub = typeof process === \"object\" && typeof process.env === \"object\" ? process : {\n  env: {}\n};\nvar invariant$1 = invariant;\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process, processStub, setVerbosity };","map":{"version":3,"mappings":";AAAA,IAAMA,cAAc,GAAG,qBAAvB;AAEE,SAIEC,MAAa,eAJf;AAAA,kBAAc,mBAAG,UAAUC,GAAV,EAAoBC,KAApB,EAA8B;EAC7CD,GAAG,CAACE,SAAJ,GAAgBD,KAAhB;EACA,OAAOD,GAAP;AACD,CAHa,GAGbG,EAHD;;;;;EAMkCC;;EAGlC,wBAAYC,OAAZ,EAAqD;IAAzC;MAAAA;IAAyC;;IAArD,YACEC,kBACE,OAAOD,OAAP,KAAmB,QAAnB,GACOP,cAAc,OAAd,GAAmBO,OAAnB,GAA0B,4DADjC,GAEIA,OAHN,KAIC,IALH;;IAFAE,oBAAc,CAAd;IACAA,aAAOT,cAAP;IAOEU,cAAc,CAACD,KAAD,EAAOE,cAAc,CAACC,SAAtB,CAAd;;EACD;;EACH;AAXA,EAAoCC;;SAapBC,UACdC,WACAR,SAAyB;EAEzB,IAAI,CAACQ,SAAL,EAAgB;IACd,MAAM,IAAIJ,cAAJ,CAAmBJ,OAAnB,CAAN;EACD;AACF;;AAED,IAAMS,eAAe,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,EAAyB,QAAzB,CAAxB;AAGA,IAAIC,cAAc,GAAGD,eAAe,CAACE,OAAhB,CAAwB,KAAxB,CAArB;;AAEA,SAASC,iBAAT,CAAwDC,MAAxD,EAAiE;EAC/D,OAAO;IACL,IAAIJ,eAAe,CAACE,OAAhB,CAAwBE,MAAxB,KAAmCH,cAAvC,EAAuD;MACrD,OAAOI,OAAO,CAACD,MAAD,CAAP,CAAgBE,KAAhB,CAAsBD,OAAtB,EAA+BE,SAA/B,CAAP;IACD;EACqB,CAJxB;AAKD;;AAED,WAAiBT,SAAjB,EAA0B;EACXA,gBAAMK,iBAAiB,CAAC,KAAD,CAAvB;EACAL,iBAAOK,iBAAiB,CAAC,MAAD,CAAxB;EACAL,kBAAQK,iBAAiB,CAAC,OAAD,CAAzB;AACd,CAJD,EAAiBL,SAAS,KAATA,SAAS,MAA1B;;SAMgBU,aAAaC,OAAqB;EAChD,IAAMC,GAAG,GAAGV,eAAe,CAACC,cAAD,CAA3B;EACAA,cAAc,GAAGU,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYZ,eAAe,CAACE,OAAhB,CAAwBO,KAAxB,CAAZ,CAAjB;EACA,OAAOC,GAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;;;IACaG,WAAW,GAItB,OAAOC,OAAP,KAAmB,QAAnB,IACA,OAAOA,OAAO,CAACC,GAAf,KAAuB,QAFrB,GAGAD,OAHA,GAGU;EAAEC,GAAG,EAAE;AAAP;AAId,kBAAejB,SAAf","names":["genericMessage","Object","obj","proto","__proto__","_a","__extends","message","_super","_this","setPrototypeOf","InvariantError","prototype","Error","invariant","condition","verbosityLevels","verbosityLevel","indexOf","wrapConsoleMethod","method","console","apply","arguments","setVerbosity","level","old","Math","max","processStub","process","env"],"sources":["../src/invariant.ts"],"sourcesContent":["const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(\n  condition: any,\n  message?: string | number,\n): asserts condition {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nconst verbosityLevels = [\"log\", \"warn\", \"error\", \"silent\"] as const;\ntype VerbosityLevel = (typeof verbosityLevels)[number];\ntype ConsoleMethodName = Exclude<VerbosityLevel, \"silent\">;\nlet verbosityLevel = verbosityLevels.indexOf(\"log\");\n\nfunction wrapConsoleMethod<M extends ConsoleMethodName>(method: M) {\n  return function () {\n    if (verbosityLevels.indexOf(method) >= verbosityLevel) {\n      return console[method].apply(console, arguments as any);\n    }\n  } as (typeof console)[M];\n}\n\nexport namespace invariant {\n  export const log = wrapConsoleMethod(\"log\");\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\nexport function setVerbosity(level: VerbosityLevel): VerbosityLevel {\n  const old = verbosityLevels[verbosityLevel];\n  verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));\n  return old;\n}\n\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also export processStub, so you can import { invariant, processStub } from\n// \"ts-invariant\" and assign processStub to a local variable named process.\nexport const processStub: {\n  env: Record<string, any>;\n  [key: string]: any;\n} = (\n  typeof process === \"object\" &&\n  typeof process.env === \"object\"\n) ? process : { env: {} };\n\nexport { processStub as process };\n\nexport default invariant;\n"]},"metadata":{},"sourceType":"module"}