{"ast":null,"code":"import Observable from 'zen-observable';\nimport 'symbol-observable';\nvar prototype = Observable.prototype;\nvar fakeObsSymbol = '@@observable';\n\nif (!prototype[fakeObsSymbol]) {\n  prototype[fakeObsSymbol] = function () {\n    return this;\n  };\n}\n\nexport { Observable };","map":{"version":3,"mappings":"AAAA,OAAOA,UAAP,MAAuB,gBAAvB;AAIA,OAAO,mBAAP;AASQ,aAAS,GAAKA,UAAU,UAAxB;AACR,IAAMC,aAAa,GAAG,cAAtB;;AACA,IAAI,CAACC,SAAS,CAACD,aAAD,CAAd,EAA+B;EAC7BC,SAAS,CAACD,aAAD,CAAT,GAA2B;IAAc,OAAO,IAAP;EAAc,CAAvD;AACD;;AAED,SAASD,UAAT","names":["Observable","fakeObsSymbol","prototype"],"sourceRoot":"","sources":["../../../src/utilities/observables/Observable.ts"],"sourcesContent":["import Observable from 'zen-observable';\n\n// This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\nimport 'symbol-observable';\n\nexport type ObservableSubscription = ZenObservable.Subscription;\nexport type Observer<T> = ZenObservable.Observer<T>;\nexport type Subscriber<T> = ZenObservable.Subscriber<T>;\n\n// The zen-observable package defines Observable.prototype[Symbol.observable]\n// when Symbol is supported, but RxJS interop depends on also setting this fake\n// '@@observable' string as a polyfill for Symbol.observable.\nconst { prototype } = Observable;\nconst fakeObsSymbol = '@@observable' as keyof typeof prototype;\nif (!prototype[fakeObsSymbol]) {\n  prototype[fakeObsSymbol] = function () { return this; };\n}\n\nexport { Observable };\n"]},"metadata":{},"sourceType":"module"}